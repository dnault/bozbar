
plugins {
    id "com.jfrog.bintray" version "1.3.1"
    id "com.github.spotbugs" version "4.6.1"
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
}

repositories {
    mavenCentral()
}

group = "com.github.therapi"
version = "0.5.0-SNAPSHOT"

def githubProjectName = "therapi-json-rpc"
def projectDescription = "JSON-RPC Microframework for Java"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    def slf4jVersion = '1.7.30'
    def jacksonVersion = '2.12.1'
    def springVersion = '5.3.4'

    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'

    // optional dependencies
    compileOnly "org.springframework:spring-web:${springVersion}"
    compileOnly "org.springframework:spring-webmvc:${springVersion}"
    compileOnly "org.springframework:spring-aop:${springVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    implementation 'com.google.code.findbugs:jsr305:3.0.0'
    implementation 'com.google.guava:guava:21.0'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'aopalliance:aopalliance:1.0'

    api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    api "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
    api "com.fasterxml.jackson.module:jackson-module-jsonSchema:${jacksonVersion}"

    implementation "com.github.therapi:therapi-runtime-javadoc:0.12.0"

    testImplementation 'junit:junit:4.12'
    testImplementation 'net.javacrumbs.json-unit:json-unit:1.28.2'
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    testImplementation "org.springframework:spring-aop:${springVersion}"
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}


def gitUrl = "git@github.com:dnault/${githubProjectName}.git";

def pomConfig = {
    name "${group}:${project.name}"
    description projectDescription
    url "https://github.com/dnault/${githubProjectName}"
    scm {
        url "${gitUrl}"
        connection "scm:git:${gitUrl}"
        developerConnection "scm:git:${gitUrl}"
    }
    licenses {
        license {
            name 'Apache License 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            name 'David Nault'
            email 'dnault@mac.com'
            organization 'dnault'
            organizationUrl 'https://github.com/dnault'
        }
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            pom.withXml {
                asNode().appendNode('description', projectDescription)
                asNode().children().last() + pomConfig
            }

            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
}

task install {
    dependsOn(publishToMavenLocal)
}
tasks.withType(JavaCompile) {
    // retain parameter names in class files
    options.compilerArgs << "-parameters"
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

checkstyle {
    toolVersion = "6.16.1"
}

spotbugs {
    ignoreFailures = true

    excludeFilter = file("config/findbugs/findbugs-exclude.xml")
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

asciidoctor {
    attributes 'source-highlighter': 'coderay',
           // toc: '',
            idprefix: '',
            idseparator: '-',
            'data-uri': '',
            example: "${projectDir}/examples/src/main/java/com/github/therapi/example/"

    // icons               : '',
    // 'data-uri'          : ''
}

bintrayUpload.doFirst {
    if (version.contains("SNAPSHOT")) {
        throw new RuntimeException("Must not upload snapshots to bintray (current version is ${version}) -- create and tag a release version first!")
    }
}

bintray {
    if (project.hasProperty('bintrayUsername')) {
        user = project.bintrayUsername
    }

    if (project.hasProperty('bintrayApiKey')) {
        key = project.bintrayApiKey
    }

    publications = ['mavenJava'] // When uploading Maven-based publication files

    dryRun = false  //false //Whether to run this as dry-run, without deploying
    publish = false //true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        //  userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'therapi-json-rpc'
        desc = 'JSON-RPC 2.0 framework for Java'
        websiteUrl = "https://github.com/dnault/${githubProjectName}"
        issueTrackerUrl = "https://github.com/dnault/${githubProjectName}/issues"
        vcsUrl = "https://github.com/dnault/${githubProjectName}.git"
        licenses = ['Apache-2.0']
        labels = ['json-rpc']
        publicDownloadNumbers = false//true
        //attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        //Optional version descriptor
        version {
            name = project.version //'1.3-Final' //Bintray logical version name
            //desc = 'optional, version-specific description'
            released = new Date() //'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = "v" + project.version //'1.3.0'
//            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            gpg {
                //              sign = true //Determines whether to GPG sign the files. The default is false
                //            passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            mavenCentralSync {
                sync = false //true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token
                password = 'paasword' //OSS user password
                close = '0'//'1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}