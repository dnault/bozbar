buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.3.1"
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'provided-base'
apply plugin: 'findbugs'
apply plugin: 'maven-publish'


repositories {
    jcenter()
    maven { url "https://dl.bintray.com/dnault/maven/" }
}

group = "com.github.therapi"
version = "0.1.0-SNAPSHOT"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    provided 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'org.slf4j:slf4j-api:1.7.12'

    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.commons:commons-lang3:3.4'

    def jacksonVersion = '2.6.1'
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"

    compile "com.github.therapi:therapi-runtime-javadoc:0.1.1"

    //def springVersion = '4.1.6.RELEASE'
    //compile "org.springframework:spring-beans:${springVersion}"
    //compile "org.springframework:spring-context:${springVersion}"

    testCompile 'junit:junit:4.11'
    testCompile 'net.javacrumbs.json-unit:json-unit:1.6.0'
    testCompile 'org.slf4j:slf4j-simple:1.7.12'
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
}

task install {
    dependsOn(publishToMavenLocal)
}
tasks.withType(JavaCompile) {
    // retain parameter names in class files
    options.compilerArgs << "-parameters"
}

asciidoctor {
    attributes 'source-highlighter': 'coderay',
           // toc: '',
            idprefix: '',
            idseparator: '-',
            'data-uri': '',
            example: "${projectDir}/examples/src/main/java/com/github/dnault/therapi/example/"

    // icons               : '',
    // 'data-uri'          : ''
}

bintrayUpload.doFirst {
    if (version.contains("SNAPSHOT")) {
        throw new RuntimeException("Must not upload snapshots to bintray (current version is ${version}) -- create and tag a release version first!")
    }
}

bintray {
    if (project.hasProperty('bintrayUsername')) {
        user = project.bintrayUsername
    }

    if (project.hasProperty('bintrayApiKey')) {
        key = project.bintrayApiKey
    }

    publications = ['mavenJava'] // When uploading Maven-based publication files

    dryRun = false  //false //Whether to run this as dry-run, without deploying
    publish = false //true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        //  userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'therapi-json-rpc'
        desc = 'JSON-RPC 2.0 framework for Java'
        websiteUrl = 'https://github.com/dnault/therapi-json-rpc'
        issueTrackerUrl = 'https://github.com/dnault/therapi-json-rpc/issues'
        vcsUrl = 'https://github.com/dnault/therapi-json-rpc.git'
        licenses = ['Apache-2.0']
        labels = ['json-rpc']
        publicDownloadNumbers = false//true
        //attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        //Optional version descriptor
        version {
            name = project.version //'1.3-Final' //Bintray logical version name
            //desc = 'optional, version-specific description'
            released = new Date() //'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = "v" + project.version //'1.3.0'
//            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            gpg {
                //              sign = true //Determines whether to GPG sign the files. The default is false
                //            passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            mavenCentralSync {
                sync = false //true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token
                password = 'paasword' //OSS user password
                close = '0'//'1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}